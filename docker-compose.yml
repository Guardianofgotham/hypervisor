services:
  web:
    build:
      context: ./backend
    container_name: django_app
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Port for RabbitMQ messaging
      - "15672:15672" # Port for RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: ./backend
    container_name: celery_worker
    command: celery -A backend worker --loglevel=info
    env_file:
      - .env
    volumes:
      - ./backend:/app
    depends_on:
      - rabbitmq
      - db
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    networks:
      - default
    healthcheck:
      test: [ "CMD", "celery", "-A", "backend", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
